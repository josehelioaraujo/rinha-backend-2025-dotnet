using Microsoft.Data.Sqlite;
using RinhaBackend2025.Models;
using RinhaBackend2025.Services;
using System.Runtime.CompilerServices;

var builder = WebApplication.CreateBuilder(args);

// Configurações otimizadas
builder.Services.AddHttpClient();

// HTTP Clients para payment processors
builder.Services.AddHttpClient("default", client =>
{
    client.BaseAddress = new Uri(builder.Configuration["PaymentProcessor:DefaultUrl"] ?? "http://payment-processor-default:8080");
    client.Timeout = TimeSpan.FromMilliseconds(5000);
});

builder.Services.AddHttpClient("fallback", client =>
{
    client.BaseAddress = new Uri(builder.Configuration["PaymentProcessor:FallbackUrl"] ?? "http://payment-processor-fallback:8080");
    client.Timeout = TimeSpan.FromMilliseconds(5000);
});

// Serviços
builder.Services.AddSingleton<IPaymentQueue, PaymentQueue>();
builder.Services.AddSingleton<ICircuitBreaker>(provider => new UltraFastCircuitBreaker(5, TimeSpan.FromSeconds(10)));

// Workers
for (int i = 0; i < 4; i++)
{
    int workerId = i;
    builder.Services.AddSingleton<IHostedService>(provider =>
        new PaymentWorker(
            provider.GetRequiredService<IPaymentQueue>(),
            provider.GetRequiredService<IHttpClientFactory>(),
            provider.GetRequiredService<ICircuitBreaker>(),
            provider.GetRequiredService<ICircuitBreaker>(),
            provider.GetRequiredService<IConfiguration>(),
            workerId));
}

var app = builder.Build();

Console.WriteLine($"[{DateTime.UtcNow}] Starting Rinha Backend 2025 API...");

// Initialize database
await InitializeDatabaseAsync(app.Configuration.GetConnectionString("DefaultConnection")!);

// In-memory storage for quick access
var defaultCount = 0;
var fallbackCount = 0;
var defaultTotal = 0m;
var fallbackTotal = 0m;
var lockObject = new object();

// Main endpoint: Process payments
app.MapPost("/payments", async (PaymentRequest request, IPaymentQueue queue) =>
{
    Console.WriteLine($"[{DateTime.UtcNow}] RECEBIDO: {request.CorrelationId}, Amount: {request.Amount}");
    
    var completion = new TaskCompletionSource<bool>();
    var queueItem = new PaymentQueueItem(
        request.CorrelationId,
        request.Amount,
        DateTime.UtcNow,
        completion);

    await queue.EnqueueAsync(queueItem);
    await completion.Task;

    return Results.Ok();
});

// Audit endpoint: Payment summary
app.MapGet("/payments-summary", [MethodImpl(MethodImplOptions.AggressiveInlining)]
() => {
    lock (lockObject)
    {
        return new
        {
            @default = new { totalRequests = defaultCount, totalAmount = defaultTotal },
            fallback = new { totalRequests = fallbackCount, totalAmount = fallbackTotal }
        };
    }
});

// Health check endpoint
app.MapGet("/health", () => Results.Ok(new { status = "healthy", timestamp = DateTime.UtcNow }));

// Root endpoint
app.MapGet("/", () => "Rinha Backend 2025 - Complete Implementation");

app.Run();

static async Task InitializeDatabaseAsync(string connectionString)
{
    using var connection = new SqliteConnection(connectionString);
    await connection.OpenAsync();

    var command = connection.CreateCommand();
    command.CommandText = @"
        CREATE TABLE IF NOT EXISTS payments (
            correlationId TEXT PRIMARY KEY,
            amount REAL NOT NULL,
            requestedAt TEXT NOT NULL,
            processor TEXT NOT NULL,
            createdAt TEXT NOT NULL
        );
        
        CREATE INDEX IF NOT EXISTS idx_payments_requestedAt ON payments(requestedAt);
        CREATE INDEX IF NOT EXISTS idx_payments_processor ON payments(processor);
        
        PRAGMA journal_mode=WAL;
        PRAGMA synchronous=NORMAL;
        PRAGMA cache_size=2000;
        PRAGMA temp_store=memory;
    ";

    await command.ExecuteNonQueryAsync();
    Console.WriteLine("Database initialized with WAL mode");
}
